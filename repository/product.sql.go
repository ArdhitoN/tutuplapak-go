// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: product.sql

package repository

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (user_id, name, category, qty, price, sku, file_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING product_id, user_id, name, category, qty, price, sku, file_id, created_at, updated_at
`

type CreateProductParams struct {
	UserID   sql.NullInt32  `json:"user_id"`
	Name     sql.NullString `json:"name"`
	Category sql.NullInt32  `json:"category"`
	Qty      sql.NullInt32  `json:"qty"`
	Price    sql.NullString `json:"price"`
	Sku      sql.NullString `json:"sku"`
	FileID   sql.NullInt32  `json:"file_id"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.UserID,
		arg.Name,
		arg.Category,
		arg.Qty,
		arg.Price,
		arg.Sku,
		arg.FileID,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.UserID,
		&i.Name,
		&i.Category,
		&i.Qty,
		&i.Price,
		&i.Sku,
		&i.FileID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductByID = `-- name: GetProductByID :one
SELECT product_id, user_id, name, category, qty, price, sku, file_id, created_at, updated_at
FROM products
WHERE product_id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, productID int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.UserID,
		&i.Name,
		&i.Category,
		&i.Qty,
		&i.Price,
		&i.Sku,
		&i.FileID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductBySKUAndUserID = `-- name: GetProductBySKUAndUserID :one
SELECT product_id, user_id, name, category, qty, price, sku, file_id, created_at, updated_at
FROM products
WHERE sku = $1 AND user_id = $2
`

type GetProductBySKUAndUserIDParams struct {
	Sku    sql.NullString `json:"sku"`
	UserID sql.NullInt32  `json:"user_id"`
}

func (q *Queries) GetProductBySKUAndUserID(ctx context.Context, arg GetProductBySKUAndUserIDParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductBySKUAndUserID, arg.Sku, arg.UserID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.UserID,
		&i.Name,
		&i.Category,
		&i.Qty,
		&i.Price,
		&i.Sku,
		&i.FileID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
