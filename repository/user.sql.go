// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package repository

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users (email, password)
VALUES ($1, $2)
    RETURNING id, email, created_at
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CreateUserRow struct {
	ID        int32        `json:"id"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
}

// query/user.sql
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Email, &i.CreatedAt)
	return i, err
}

const createUserWithEmail = `-- name: CreateUserWithEmail :one
INSERT INTO users (email, password, phone)
VALUES ($1, $2, $3)
    RETURNING id, email, phone, created_at
`

type CreateUserWithEmailParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Phone    string `json:"phone"`
}

type CreateUserWithEmailRow struct {
	ID        int32        `json:"id"`
	Email     string       `json:"email"`
	Phone     string       `json:"phone"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateUserWithEmail(ctx context.Context, arg CreateUserWithEmailParams) (CreateUserWithEmailRow, error) {
	row := q.db.QueryRowContext(ctx, createUserWithEmail, arg.Email, arg.Password, arg.Phone)
	var i CreateUserWithEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const createUserWithPhone = `-- name: CreateUserWithPhone :one
INSERT INTO users (phone, password, email)
VALUES ($1, $2, $3)
    RETURNING id, phone, email, created_at
`

type CreateUserWithPhoneParams struct {
	Phone    string `json:"phone"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

type CreateUserWithPhoneRow struct {
	ID        int32        `json:"id"`
	Phone     string       `json:"phone"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateUserWithPhone(ctx context.Context, arg CreateUserWithPhoneParams) (CreateUserWithPhoneRow, error) {
	row := q.db.QueryRowContext(ctx, createUserWithPhone, arg.Phone, arg.Password, arg.Email)
	var i CreateUserWithPhoneRow
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, phone, password, created_at
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID        int32        `json:"id"`
	Email     string       `json:"email"`
	Phone     string       `json:"phone"`
	Password  string       `json:"password"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, phone, email, password, created_at
FROM users
WHERE phone = $1
`

type GetUserByPhoneRow struct {
	ID        int32        `json:"id"`
	Phone     string       `json:"phone"`
	Email     string       `json:"email"`
	Password  string       `json:"password"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (GetUserByPhoneRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, phone)
	var i GetUserByPhoneRow
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
